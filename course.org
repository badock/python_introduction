# -*- org-confirm-babel-evaluate: nil -*-
#+OPTIONS:    H:3 num:nil toc:2 \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Introduction to Python
#+AUTHOR:    Walid and Jonathan
#+LANGUAGE:   en
#+HTML_HEAD:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    ../languages.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXCLUDE_TAGS: noexport
#+LaTeX_CLASS: beamer
#+BEAMER_THEME: Madrid
#+OPTIONS: H:2
#+LaTeX_CLASS_OPTIONS: [presentation,smaller]

#+LATEX_HEADER: \usepackage{listings}

#+BEGIN_lateX
\AtBeginSection[] {
  \begin{frame}<beamer>{Outline}
    \[M 8;tableofcontents[currentsection]
  \end{frame}
}
#+END_lateX

#+BEGIN_latex
\definecolor{dkgreen}{rgb}{0,0.5,0}
\definecolor{dkred}{rgb}{0.5,0,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{blue(pigment)}{rgb}{0.2, 0.2, 0.6}
\lstset{
  basicstyle=\ttfamily\bfseries\footnotesize\color{blue(pigment)},
  morekeywords={virtualinvoke},
  keywordstyle=\color{blue}\bf,
  ndkeywordstyle=\color{red},
  commentstyle=\color{dkred},
  stringstyle=\color{dkgreen},
}

\makeatletter
\def\verbatim{\vspace{-0.3cm}\footnotesize\@verbatim \@vobeyspaces \@xverbatim}
\makeatother
#+END_latex


* Introduction
:PROPERTIES:
:header-args:  :results output :exports both :noweb strip-export
:END:

* Instructions
:PROPERTIES:
:header-args:  :results output :exports both :noweb strip-export
:END:

** Expressions

#+name: expression1
#+begin_src python
1 + 2 * 3 /4
"ab" + "cd" + "ef"
#+end_src

#+RESULTS: expression1

** Variables

#+name: variable1
#+begin_src python :results output :exports both
a = 1 + 2 * 3 /4
b = "ab" + "cd" + "ef"

print(a)
print(b)

type(a)
type(b)
#+end_src

which results in:

#+results: variable1
: 2
: abcdef
: <type 'int'>
: <type 'str'>
** Lists
#+name: list1
#+begin_src python :results output :exports both
li = [0, 1, 2, 3, 4]
print(li) # reference to the list

print(li[2]) # the second element in the normal order
print(li[-2]) # the second element in the reverse order
print(li[1:4]) # copy of the list like [2nd, ..., 4th[
print(li[-3:]) # copy of the list like [n-3, ..., n]
print(li[:-2]) # copy of the list like [1st, ..., n-2[

print(li + [5])
print(li[0:1] + li[2:5])
#+end_src

which results in:

#+results: list1
: [0, 1, 2, 3, 4]
: 2
: 3
: [1, 2, 3]
: [2, 3, 4]
: [0, 1, 2]
: [0, 1, 2, 3, 4, 5]
: [0, 2, 3, 4]

** Dictionnaries

- Dictionnary are data-structures that associates a *value* to a *key*.
- Access to a value is in *O(1)* (good for building indexes).

#+name: dict1
#+begin_src python :results output :exports both
di = {"key1": "value1", "key2": "value2"} # Declaring a dict
di_has_key1 = "key1" in di # Checking if "key1" is in the dict
value_key1 = di["key1"] # Accessing value of "key1"
print(("It is %s that \"key1\" is in di,"
       " whose value is %s") % (di_has_key1, value_key1))
di["key3"] = 42 # Setting "key3" to 42
#+end_src

which results in:

#+results: dict1
: [0, 1, 2, 3, 4]
: 2
: 3
: [1, 2, 3]
: [2, 3, 4]
: [0, 1, 2]

* Blocks
:PROPERTIES:
:header-args:  :results output :exports both :noweb strip-export
:END:

** If then else
- Keyword for declaring a control structure are *if*, *elif* and *else*.
- *if* and *elif* take a boolean expression as parameter, which can be
  a combination of *and* and *or* operators.
#+name: if1
#+begin_src python :results output :exports both
# test the following with a switching between {1,2,3}
a = 1
if a == 0 or (a > 0 and a < 2):
   print("foo")
elif (a > 1 and a < 3):
   print("boo")
else:
   print("bar")
#+end_src

which results in:

#+results: if1
: bar

** While
- Keyword for declaring a conditional loop is *while*.
- *while* take a boolean expression as parameter.
#+name: while1
#+begin_src python :results output :exports both
a = 1
print("initial value: %i" % (a))
while a < 10:
   a += 1
print("final value: %i" % (a))
#+end_src

which results in:

#+results: while1
: initial value: 1
: final value: 10
** For
- Keyword for declaring an iterative loop is *for*.
- *for* take a boolean expression as parameter.
#+name: for1
#+begin_src python :results output :exports both
for i in range(1, 5):
   print(i)
#+end_src

which results in:

#+results: for1
: 1
: 2
: 3
: 4

** For (dictionnaries)
#+name: for2
#+begin_src python :results output :exports both
di = {"key1": "python", "key2": "cobra", "key3": "boa"}
for key in di:
   print(di[key])
#+end_src

which results in:

#+results: for2
: dehors
: beau
: il fait

* Functions
:PROPERTIES:
:header-args:  :results output :exports both :noweb strip-export
:END:

** Declaration of functions
Functions are declared with:
- the *def* keyword
- the name of the function
- the arguments of the function

#+NAME: library
#+begin_src python
def foo(x):
  if x>0:
    return x+1
  else:
    return x-1
#+end_src

** Evaluation of functions
The following code call the function *foo*

#+name: function1
#+begin_src python :results output :exports both
<<library>>
a = foo(10)
print(a)
#+end_src

which results in:
#+results: function1
: 11

** lambdas
Lambdas are mechnaisms from *functional programming*, which enables to do higher-order functions.

#+name: lambda1
#+begin_src python :results output :exports both
li = [0, 1, 2, 3, 4]
multiplie_par_2 = lambda x: 2*x
li2 = map(multiplie_par_2, li)

filter_higher_than_4 = lambda x: x >= 4
li3 = filter(filter_higher_than_4, li2)

print(li2)
print(li3)
#+end_src

which results in:
#+results: lambda1
: [0, 2, 4, 6, 8]
: [4, 6, 8]

** decorators
- A function f can be wrapped by a function g: g is a *decorator* of f.
- The decorator  is applied  one time,  no matter how  many times  the decorated
  function is called.

#+name: decorator1
#+begin_src python :results output :exports both
def multiplie_par_2_decorator(func):
   def wrapper(x):
      return func(x) * 2
   return wrapper

@multiplie_par_2_decorator
def foo(x):
   return x

print(foo(1))
#+end_src

which results in:
#+results: decorator1
: 2
* Objects
:PROPERTIES:
:header-args: :results output :exports both :noweb strip-export
:END:

** classes 
 - 

#+name: classes
#+begin_src python
# Defining a new Class
class Person(object):
 """ Simple Person class """

 counter = 0  # Class attribute

 def __init__(self, name):
  """ This method is called when this class is instantiated """
  # name : required argument
  self.name = name  # Instance attribute
  self.age  = 0   # An other instance attribute

  def say_hello(self):
    return "Hello I am : " + self.name

# Object instantiation
x = Person()

# Attributes R/W
x.name = "toto"
x.age = 20

print(x.name)

x.say_hello()

#+end_src
The result is :
#+RESULTS: classes


- Advanced classes
#+name: aclasses
#+begin_src python
class Student(Person):
 """ Student class that herite from Person """

 def __init__(self, sexe, school=None):
  # sexe : required argument
  # school : keyword argument (optional)

  # Call to super constructor
  super(Student, self).__init__()

  self.sexe = sexe
  self.school = school

 def __str__(self):
  """ return a string when str() is called on instance of this class 
   (equivalent to toString method in java)
  """

  return "Name : " + self.name + " Age : " +\
     str(self.age) +\  # explicit type cast int to str
     " Sexe : " + self.sexe + " School : " + str(self.school) # cast due to None  

toto = Student("M")
titi = Student("F", school="EMN")

print(toto)
print(titi)


#+end_src
The result is :
#+RESULTS: aclasses

** Meta Programming
 - 

#+name: meta
#+begin_src python

x = Person()
y = Person()

# Objects and Class runtime inspection
hasattr(Person, "counter")
hasattr(Person, "name")
hasattr(x, "counter")
hasattr(x, "name")

# Adding attributes at runtime
setattr(x, "sexe", "M") # or : x.sexe = "M"

print(x.sexe)
# print(y.sexe) # this will trigger an AttributeError

# Getting attributes
getattr(x, "age") # or: x.age

# Getting class information
x.__class__

# Overwriting methods at runtime
print(toto.say_hello())

Person.say_hello = lambda self: str(self.age)

print(toto.say_hello())

#+end_src
The result is :
#+RESULTS: meta

* Errors
:PROPERTIES:
:header-args:  :results output :exports both :noweb strip-export
:END:

* Concurrency
:PROPERTIES:
:header-args:  :results output :exports both :noweb strip-export
:END:

** Threads (1/2)

- Threads can be used thank to the *Thread* class provided by the *threading* module.

#+name: threads1
#+begin_src python
from threading import Thread
import time

class Counter(Thread):

    def __init__(self, num):
        Thread.__init__(self)
        self.num = num

    def run(self):
        i = 0
        while i < 5:
            print("thread-%i: %i" % (self.num, i))
            i += 1
            time.sleep(0.1)
#+end_src

** Threads (2/2)

#+name: threads2
#+begin_src python :results output :exports both
<<threads1>>
counter1 = Counter(1)  # Declare two counters
counter2 = Counter(2)

counter1.start() # Start the counting threads
counter2.start()

counter1.join() # Wait untill the thread has finished
counter2.join()
#+end_src

which results in:

#+results: threads2
#+begin_example
thread-1: 0
thread-2: 0
thread-1: 1
thread-2: 1
thread-1: 2
thread-2: 2
thread-1: 3
thread-2: 3
thread-1: 4
thread-2: 4
#+end_example
* Plotting

** Plotting with matplotlib
#+begin_src python :results file
import matplotlib, numpy
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
plt.savefig('python-matplot-fig.png')
return 'python-matplot-fig.png' # return filename to org-mode
#+end_src

#+RESULTS:
[[file:python-matplot-fig.png]]

** Result
file:python-matplot-fig.png
